//Standard grafana alloy configuration
// Setup for self-monitoring exporter for Alloy integrations.
prometheus.exporter.self "integrations_alloy" { }

// Relabeling rules for "integrations_alloy" discovery targets.
discovery.relabel "integrations_alloy" {
    targets = prometheus.exporter.self.integrations_alloy.targets

    // Set the "instance" label to the hostname.
    rule {
        target_label = "instance"
        replacement  = constants.hostname
    }

    // Set a custom "alloy_hostname" label.
    rule {
        target_label = "alloy_hostname"
        replacement  = constants.hostname
    }

    // Define the "job" as "integrations/alloy-check".
    rule {
        target_label = "job"
        replacement  = "integrations/alloy-check"
    }
}

// Scraping configuration for "integrations_alloy" targets.
prometheus.scrape "integrations_alloy" {
    targets    = discovery.relabel.integrations_alloy.output
    forward_to = [prometheus.relabel.integrations_alloy.receiver]

    // Set the scrape interval to 60 seconds.
    scrape_interval = "60s"
}

// Relabeling rules for forwarding metrics to the remote write receiver.
prometheus.relabel "integrations_alloy" {
    forward_to = [prometheus.remote_write.metrics_service.receiver]

    // Keep only specific metrics based on the regex match.
    rule {
        source_labels = ["__name__"]
        regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
        action        = "keep"
    }
}

// Windows exporter setup for Alloy integration.
prometheus.exporter.windows "integrations_windows_exporter" {
    enabled_collectors = ["cpu", "cs", "logical_disk", "net", "os", "service", "system", "time", "diskdrive", "process"]
    service {
        where_clause = "Name='wuauserv' OR Name='winmgmt'"
    }
}

// Relabeling rules for Windows exporter discovery targets.
discovery.relabel "integrations_windows_exporter" {
    targets = prometheus.exporter.windows.integrations_windows_exporter.targets

    // Set the "job" label for Windows exporter integration.
    rule {
        target_label = "job"
        replacement  = "integrations/windows_exporter"
    }

    // Set the "instance" label to the hostname.
    rule {
        target_label = "instance"
        replacement  = constants.hostname
    }
}

// Scraping configuration for Windows exporter integration targets.
prometheus.scrape "integrations_windows_exporter" {
    targets    = discovery.relabel.integrations_windows_exporter.output
    forward_to = [prometheus.relabel.integrations_windows_exporter.receiver]
    job_name   = "integrations/windows_exporter"
}

// Relabeling rules for forwarding Windows exporter metrics to the remote write receiver.
prometheus.relabel "integrations_windows_exporter" {
    forward_to = [prometheus.remote_write.metrics_service.receiver]

    // Keep only specific Windows-related metrics based on the regex match.
    rule {
        action        = "keep"
        regex         = "(up|windows_cpu_interrupts_total|windows_cpu_time_total|windows_cs_hostname|windows_cs_logical_processors|...)"
        source_labels = ["__name__"]
    }
}

// Processing rules for logs from the Windows exporter (Application logs).
loki.process "logs_integrations_windows_exporter_application" {
    forward_to = [loki.write.grafana_cloud_loki.receiver]

    // Extract specific JSON fields from the logs.
    stage.json {
        expressions = {
            level  = "levelText",
            source = "source",
        }
    }

    // Apply labels to the logs.
    stage.labels {
        values = {
            level  = "",
            source = "",
        }
    }
}

// Relabeling rules for Windows exporter application logs.
loki.relabel "logs_integrations_windows_exporter_application" {
    forward_to = [loki.process.logs_integrations_windows_exporter_application.receiver]

    // Set the "agent_hostname" label from the "computer" label in logs.
    rule {
        source_labels = ["computer"]
        target_label  = "agent_hostname"
    }
}

// Source configuration for Windows Event Log (Application).
loki.source.windowsevent "logs_integrations_windows_exporter_application" {
    locale                 = 1033
    eventlog_name          = "Application"
    bookmark_path          = "./bookmarks-app.xml"
    poll_interval          = "0s"
    use_incoming_timestamp = true
    forward_to             = [loki.relabel.logs_integrations_windows_exporter_application.receiver]
    labels                 = {
        instance = constants.hostname,
        job      = "integrations/windows_exporter",
    }
}

// Processing rules for logs from the Windows exporter (System logs).
loki.process "logs_integrations_windows_exporter_system" {
    forward_to = [loki.write.grafana_cloud_loki.receiver]

    // Extract specific JSON fields from the logs.
    stage.json {
        expressions = {
            level  = "levelText",
            source = "source",
        }
    }

    // Apply labels to the logs.
    stage.labels {
        values = {
            level  = "",
            source = "",
        }
    }
}

// Relabeling rules for Windows exporter system logs.
loki.relabel "logs_integrations_windows_exporter_system" {
    forward_to = [loki.process.logs_integrations_windows_exporter_system.receiver]

    // Set the "agent_hostname" label from the "computer" label in logs.
    rule {
        source_labels = ["computer"]
        target_label  = "agent_hostname"
    }
}

// Source configuration for Windows Event Log (System).
loki.source.windowsevent "logs_integrations_windows_exporter_system" {
    locale                 = 1033
    eventlog_name          = "System"
    bookmark_path          = "./bookmarks-sys.xml"
    poll_interval          = "0s"
    use_incoming_timestamp = true
    forward_to             = [loki.relabel.logs_integrations_windows_exporter_system.receiver]
    labels                 = {
        instance = constants.hostname,
        job      = "integrations/windows_exporter",
    }
}

// Remote write configuration for Prometheus metrics to Grafana Cloud endpoint.
prometheus.remote_write "metrics_service" {
    endpoint {
        url = env("GRAFANA_METRICS_SERVICE_URL")

        basic_auth {
            username = env("GRAFANA_USER")
        	password = env("GRAFANA_TOKEN")
        }
    }
}

// Loki write configuration to push logs to Grafana Cloud.
loki.write "grafana_cloud_loki" {
    endpoint {
        url = env("GRAFANA_LOKI_URL")

        basic_auth {
            username = env("GRAFANA_USER")
            password = env("GRAFANA_TOKEN")
        }
    }
}