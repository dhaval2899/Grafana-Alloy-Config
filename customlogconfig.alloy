//Custom alloy configuration file
prometheus.exporter.self "integrations_alloy" { }

logging {
	level = "debug"
}

//env("GRAFANA_TOKEN")
prometheus.remote_write "metrics_service" {
	endpoint {
		url = env("GRAFANA_METRICS_SERVICE_URL")

		basic_auth {
			username = env("GRAFANA_USER")
			password = env("GRAFANA_TOKEN")
		}
	}
}

loki.write "grafana_cloud_loki" {
	endpoint {
		url = env("GRAFANA_LOKI_URL")

		basic_auth {
			username = env("GRAFANA_USER")
			password = env("GRAFANA_TOKEN")
		}
	}
}

discovery.relabel "integrations_alloy" {
	targets = prometheus.exporter.self.integrations_alloy.targets
	rule {
		target_label = "instance"
		replacement  = constants.hostname
	}
	rule {
		target_label = "alloy_hostname"
		replacement  = constants.hostname
	}
	rule {
		target_label = "job"
		replacement  = "integrations/alloy-check"
	}
}
prometheus.scrape "integrations_alloy" {
	targets    = discovery.relabel.integrations_alloy.output
	forward_to = [prometheus.relabel.integrations_alloy.receiver]
	scrape_interval = "60s"
}

prometheus.relabel "integrations_alloy" {
	forward_to = [prometheus.remote_write.metrics_service.receiver]
	rule {
		source_labels = ["__name__"]
        action        = "keep"
		regex         = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
	}
}

prometheus.exporter.windows "integrations_windows_exporter" {
	enabled_collectors = ["cpu", "cs", "logical_disk", "net", "os", "service", "system", "time", "diskdrive", "process"]
}
discovery.relabel "integrations_windows_exporter" {
	targets = prometheus.exporter.windows.integrations_windows_exporter.targets
	rule {
		target_label = "job"
		replacement  = "integrations/windows_exporter"
	}
	rule {
		target_label = "instance"
		replacement  = constants.hostname
	}
}
prometheus.scrape "integrations_windows_exporter" {
	targets    = discovery.relabel.integrations_windows_exporter.output
	forward_to = [prometheus.relabel.integrations_windows_exporter.receiver]
	job_name   = "integrations/windows_exporter"
}
prometheus.relabel "integrations_windows_exporter" {
	forward_to = [prometheus.remote_write.metrics_service.receiver]
		rule {
		action = "keep"
        regex = "up|windows_cpu_interrupts_total|windows_cpu_time_total|windows_cs_hostname|windows_cs_logical_processors|windows_cs_physical_memory_bytes|windows_disk_drive_status|windows_logical_disk_avg_read_requests_queued|windows_logical_disk_avg_write_requests_queued|windows_logical_disk_free_bytes|windows_logical_disk_idle_seconds_total|windows_logical_disk_read_bytes_total|windows_logical_disk_read_seconds_total|windows_logical_disk_reads_total|windows_logical_disk_size_bytes|windows_logical_disk_write_bytes_total|windows_logical_disk_write_seconds_total|windows_logical_disk_writes_total|windows_net_bytes_received_total|windows_net_bytes_sent_total|windows_net_packets_outbound_discarded_total|windows_net_packets_outbound_errors_total|windows_net_packets_received_discarded_total|windows_net_packets_received_errors_total|windows_net_packets_received_unknown_total|windows_os_info|windows_os_paging_limit_bytes|windows_os_physical_memory_free_bytes|windows_os_timezone|windows_service_status|windows_system_context_switches_total|windows_system_processor_queue_length|windows_system_system_up_time|windows_time_computed_time_offset_seconds|windows_time_ntp_round_trip_delay_seconds|windows_process_cpu_time_total|windows_process_io_bytes_total"
		source_labels = ["__name__"]
	}
	rule {
		source_labels = ["volume"]
		regex         = "HarddiskVolume.*"
		action        = "drop"
	}
}
// - Logs
loki.process "logs_integrations_windows_exporter_application" {
	forward_to = [loki.write.grafana_cloud_loki.receiver]
	stage.json {
		expressions = {
			level  = "levelText",
			source = "source",
		}
	}
	stage.labels {
		values = {
			level  = "",
			source = "",
		}
	}
}
loki.relabel "logs_integrations_windows_exporter_application" {
	forward_to = [loki.process.logs_integrations_windows_exporter_application.receiver]
	rule {
		source_labels = ["computer"]
		target_label  = "agent_hostname"
	}
}
loki.source.windowsevent "logs_integrations_windows_exporter_application" {
	locale                 = 1033
	eventlog_name          = "Application"
	bookmark_path          = "./bookmarks-app.xml"
	poll_interval          = "0s"
	use_incoming_timestamp = true
	forward_to             = [loki.relabel.logs_integrations_windows_exporter_application.receiver]
	labels                 = {
		instance = constants.hostname,
		job      = "integrations/windows_exporter",
	}
}
loki.process "logs_integrations_windows_exporter_system" {
	forward_to = [loki.write.grafana_cloud_loki.receiver]
	stage.json {
		expressions = {
			level  = "levelText",
			source = "source",
		}
	}
	stage.labels {
		values = {
			level  = "",
			source = "",
		}
	}
}
loki.relabel "logs_integrations_windows_exporter_system" {
	forward_to = [loki.process.logs_integrations_windows_exporter_system.receiver]
	rule {
		source_labels = ["computer"]
		target_label  = "agent_hostname"
	}
}
loki.source.windowsevent "logs_integrations_windows_exporter_system" {
	locale                 = 1033
	eventlog_name          = "System"
	bookmark_path          = "./bookmarks-sys.xml"
	poll_interval          = "0s"
	use_incoming_timestamp = true
	forward_to             = [loki.relabel.logs_integrations_windows_exporter_system.receiver]
	labels                 = {
		instance = constants.hostname,
		job      = "integrations/windows_exporter",
	}
}
local.file_match "pdc_logs" {  // Stage 1 - Wildcard component to find the log files for the pdc process
	path_targets = [
		{__path__ = "C:\\ServerApplication\\Logs\\*.txt"},
	]
}
loki.source.file "tmpfiles" {  // Stage 2 - Collect the logs from the location found in stage 1
	forward_to = [loki.process.pdc_logs_labels.receiver]
	targets    = local.file_match.pdc_logs.targets
}
loki.process "pdc_logs_labels" {  // Stage 3 - Add labels to the logs collected in stage 2
	forward_to = [loki.relabel.pdc_logs_labels.receiver]
	stage.logfmt {
		mapping = {
			"level" = "",
		}
	}
	stage.labels {
		values = {
			level = "",
		}
	}
}
loki.relabel "pdc_logs_labels" {
	forward_to = [loki.write.grafana_cloud_loki.receiver]
	rule {
		action       = "replace"
		target_label = "instance"
		replacement  = constants.hostname
	}
	rule {
		action       = "replace"
		target_label = "job"
		replacement  = "integrations/windows_exporter"
	}
	rule {
		action       = "replace"
		target_label = "source"
		replacement  = "pdc_devopsapp-server01"
		
	}
}

// - Metrics
prometheus.scrape "pdc_metrics" {
	forward_to = [prometheus.remote_write.metrics_service.receiver]
	targets    = [
		{"__address__" = "localhost:8090", "instance" = constants.hostname, "job" = "integrations/windows_exporter", "source" = "pdc_devopsapp-server01"},
	]
	scrape_interval = "60s"
}

local.file_match "logs_integrations_devops_datacollection_canada_integration" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "C:\\MyApp\\Integration\\Commitments\\bin\\Debug\\Logs\\log_*.txt",
		job         = "devops_datacollection_canada_integration",
	}]
}
loki.source.file "logs_integrations_devops_datacollection_canada_integration" {
	targets               = local.file_match.logs_integrations_devops_datacollection_canada_integration.targets
	forward_to            = [loki.process.logs_integrations_devops_datacollection_canada_integration.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}
loki.process "logs_integrations_devops_datacollection_canada_integration" {
	forward_to = [loki.write.grafana_cloud_loki.receiver]

	stage.replace {
		expression = "(?P<filepath>.*)[0-9]{8}(?P<filepath>.*)"
		source     = "filename"
	}

	stage.replace {
		expression = "(.*)"
		replace    = "{{ .filename }} {{ .Value }}"
	}

	stage.regex {
		expression = "(?P<datetime>\\d{8}\\s\\d{2}:\\d{2}:\\d{2}) - (?P<message>.*)"
	}

	stage.timestamp {
		source   = "datetime"
		format   = "20060102 15:04:05"
		location = "America/Toronto"
	}

	stage.output {
		source = "message"
	}

	stage.label_drop {
		values = ["filename"]
	}
}


local.file_match "logs_integrations_devops_canada_integration_dev" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "C:\\MyApp\\Integration\\Logs\\log_*.txt",
		job         = "devops_canada_integration",
	}]
}

loki.source.file "logs_integrations_devops_canada_integration_dev" {
	targets               = local.file_match.logs_integrations_devops_canada_integration_dev.targets
	forward_to            = [loki.process.logs_integrations_devops_canada_integration_dev.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

loki.process "logs_integrations_devops_canada_integration_dev" {
	forward_to = [loki.write.grafana_cloud_loki.receiver]
	stage.replace {
		expression = "(?P<filepath>.*)[0-9]{8}(?P<filepath>.*)"
		source     = "filename"
	}
	stage.replace {
		expression = "(.*)"
		replace    = "{{ .filename }} {{ .Value }}"
	}
	stage.regex {
		expression = "(?P<datetime>\\d{8}\\s\\d{2}:\\d{2}:\\d{2}) - (?P<message>.*)"
	}
	stage.timestamp {
		source   = "datetime"
		format   = "20060102 15:04:05"
		location = "America/Toronto"
	}
	stage.output {
		source = "message"
	}
	stage.label_drop {
		values = ["filename"]
	}
}

